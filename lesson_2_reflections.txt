What happens when you initialize a repository? Why do you need to do it?

Running git init under a directory creates a new hidden folder titled ".git". This allows git bash to work properly under the directory. Without initalization, the git commands
like log, checkout and diff will not work.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the temporary intermediate step of creating a commit from the working directory to the git repository. It has no real value without potential files to be
considered added to the next commit.

How can you use the staging area to make sure you have one commit per logical change?

The staging area organizes all files which have been edited and separates them from the current directory. The intermediate area is useful, especially if the directory has an
overwhelming number of files because it separates the updated changes prior to the commit. Any time when I want to work on another part of the project, I can check the status in
git, commit the changes (thus cleaning up the staging area), and then I can start working on another task which uses different files. This ensures that only one logical change is
associated for each commit, even if the change requires multiple files.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are helpful when the project needs to make changes which do not reflect the true status of an updated project, but if they are unofficial attempts or ideas to be
introduced at a later time. Branches help keep history organized by illustrating the parent node whose code is responsible for the foundation of any of its children down the line.

How do the diagrams help you visualize the branch structure?

The diagrams shown in Udacity illustrate the project history consisting of commits, either on the master branch or on several other branches. A visual aid like this allows me to
understand how each commit is related to its parent. An aid like this may be useful for a practical project consisting of several branches in order to ensure that the final output
will be updated with all necessary and functional commits.